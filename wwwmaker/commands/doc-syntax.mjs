// Generated by PEG.js v0.11.0, https://pegjs.org/

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message = message;
  this.expected = expected;
  this.found = found;
  this.location = location;
  this.name = "SyntaxError";

  // istanbul ignore next
  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found, location) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    },

    not: function(expectation) {
      return "not " + describeExpectation(expectation.expected);
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$DefaultTracer() {
  this.indentLevel = 0;
}

peg$DefaultTracer.prototype.trace = function(event) {
  var that = this;

  function log(event) {
    function repeat(string, n) {
       var result = "", i;

       for (i = 0; i < n; i++) {
         result += string;
       }

       return result;
    }

    function pad(string, length) {
      return string + repeat(" ", length - string.length);
    }

    if (typeof console === "object") {
      console.log(
        event.location.start.line + ":" + event.location.start.column + "-"
          + event.location.end.line + ":" + event.location.end.column + " "
          + pad(event.type, 10) + " "
          + repeat("  ", that.indentLevel) + event.rule
      );
    }
  }

  switch (event.type) {
    case "rule.enter":
      log(event);
      this.indentLevel++;
      break;

    case "rule.match":
      this.indentLevel--;
      log(event);
      break;

    case "rule.fail":
      this.indentLevel--;
      log(event);
      break;

    // istanbul ignore next
    default:
      throw new Error("Invalid event type: " + event.type + ".");
  }
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};

  var peg$startRuleFunctions = { start: peg$parsestart };
  var peg$startRuleFunction = peg$parsestart;

  var peg$c0 = "#";
  var peg$c1 = "<script";
  var peg$c2 = "type=\"application/json\"";
  var peg$c3 = "id=\"sfblog\"";
  var peg$c4 = ">";
  var peg$c5 = "</script";
  var peg$c6 = "<style>";
  var peg$c7 = "</style";
  var peg$c8 = "</style>";
  var peg$c9 = "\"";
  var peg$c10 = "'";

  var peg$r0 = /^[^\r\n]/;
  var peg$r1 = /^[\r]/;
  var peg$r2 = /^[\n]/;
  var peg$r3 = /^[^"]/;
  var peg$r4 = /^[^']/;
var peg$r5 = /^[^"'<>` ]/;
  var peg$r6 = /^[a-zA-Z0-9_\-]/;
  var peg$r7 = /^[a-zA-Z0-9:_\-]/;
  var peg$r8 = /^[\r\n \t\f]/;
  var peg$r9 = /^[ \t\f]/;

  var peg$e0 = peg$otherExpectation("title");
  var peg$e1 = peg$otherExpectation("metadata");
  var peg$e2 = peg$literalExpectation("<style>", false);
  var peg$e3 = peg$literalExpectation("</style", true);
  var peg$e4 = peg$literalExpectation(">", false);
  var peg$e5 = peg$anyExpectation();
  var peg$e6 = peg$literalExpectation("</style>", false);
  var peg$e7 = peg$otherExpectation("space characters");

  var peg$f0 = function(title, metadata, s) {return s};
  var peg$f1 = function(title, metadata, aditionalStyle, body) {
    return {
      title:title.content,
      metadata:metadata,
      aditionalStyle:aditionalStyle,
      body:body
    };
  };
  var peg$f2 = function(title) { return new Node('title',null,title)};
  var peg$f3 = function(metastart, c) { return c };
  var peg$f4 = function(metastart, ch) { return ch.join('') };
  var peg$f5 = function(metastart, json, metaend) {
    if(!!metastart != !!metaend) {
      error('<script> tag unmatch');
    }
    return new Node('meta-data',JSON.parse(json));
  };
  var peg$f6 = function(start, c) { return c };
  var peg$f7 = function(start, ch) { return ch.join('') };
  var peg$f8 = function(start, style, end) {
    return new Node('AddtionalStyle',style);
  };
  var peg$f9 = function() { return new Node('Body',text()); };
  var peg$f10 = function(ch) { return ch.join(''); };
  var peg$f11 = function(h, t) { return h + t.join('') };

  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$expected = [];
  var peg$silentFails = 0;

  var peg$resultsCache = {};

  var peg$tracer = "tracer" in options ? options.tracer : new peg$DefaultTracer();

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return [peg$savedPos, peg$currPos];
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  var peg$VALIDFILENAME = typeof options.filename === "string" && options.filename.length > 0;
  function peg$computeLocation(startPos, endPos) {
    var loc = {};

    if ( peg$VALIDFILENAME ) loc.filename = options.filename;

    var startPosDetails = peg$computePosDetails(startPos);
    loc.start = {
      offset: startPos,
      line: startPosDetails.line,
      column: startPosDetails.column
    };

    var endPosDetails = peg$computePosDetails(endPos);
    loc.end = {
      offset: endPos,
      line: endPosDetails.line,
      column: endPosDetails.column
    };

    return loc;
  }

  function peg$begin() {
    peg$expected.push({ pos: peg$currPos, variants: [] });
  }

  function peg$expect(expected) {
    var top = peg$expected[peg$expected.length - 1];

    if (peg$currPos < top.pos) { return; }

    if (peg$currPos > top.pos) {
      top.pos = peg$currPos;
      top.variants = [];
    }

    top.variants.push(expected);
  }

  function peg$end(invert) {
    var expected = peg$expected.pop();
    var top = peg$expected[peg$expected.length - 1];
    var variants = expected.variants;

    if (top.pos !== expected.pos) { return; }

    if (invert) {
      variants = variants.map(function(e) {
        return e.type === "not" ? e.expected : { type: "not", expected: e };
      });
    }

    Array.prototype.push.apply(top.variants, variants);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found, location),
      expected,
      found,
      location
    );
  }

  function peg$buildError() {
    var expected = peg$expected[0];
    var failPos = expected.pos;

    return peg$buildStructuredError(
      expected.variants,
      failPos < input.length ? input.charAt(failPos) : null,
      failPos < input.length
        ? peg$computeLocation(failPos, failPos + 1)
        : peg$computeLocation(failPos, failPos)
    );
  }

  function peg$parsestart() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    peg$tracer.trace({
      type: "rule.enter",
      rule: "start",
      location: peg$computeLocation(startPos, startPos)
    });

    var key = peg$currPos * 9 + 0;
    var cached = peg$resultsCache[key];
    var rule$expectations = [];

    rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
      rule$expectations.push(expected);
    }

    if (cached) {
      peg$currPos = cached.nextPos;

      rule$expectations = cached.expectations;
      if (peg$silentFails === 0) {
        rule$expectations.forEach(peg$expect);
      }

    if (cached.result !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "start",
        result: cached.result,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "start",
        location: peg$computeLocation(startPos, startPos)
      });
    }

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseTitle();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parseMetaData();
      s4 = peg$currPos;
      s5 = peg$parse__();
      s6 = peg$parseAditionalStyle();
      if (s6 !== peg$FAILED) {
        peg$savedPos = s4;
        s4 = peg$f0(s1, s3, s6);
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parseBody();
      peg$savedPos = s0;
      s0 = peg$f1(s1, s3, s4, s5);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = {
      nextPos: peg$currPos,
      result: s0,
      expectations: rule$expectations
    };

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "start",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "start",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseTitle() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Title",
      location: peg$computeLocation(startPos, startPos)
    });

    var key = peg$currPos * 9 + 1;
    var cached = peg$resultsCache[key];
    var rule$expectations = [];

    rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
      rule$expectations.push(expected);
    }

    if (cached) {
      peg$currPos = cached.nextPos;

      rule$expectations = cached.expectations;
      if (peg$silentFails === 0) {
        rule$expectations.forEach(peg$expect);
      }

    if (cached.result !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Title",
        result: cached.result,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Title",
        location: peg$computeLocation(startPos, startPos)
      });
    }

      return cached.result;
    }

    rule$expects(peg$e0);
    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c0;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$currPos;
      s4 = [];
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
      }
      s3 = input.substring(s3, peg$currPos);
      if (peg$r1.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      if (peg$r2.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f2(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;

    peg$resultsCache[key] = {
      nextPos: peg$currPos,
      result: s0,
      expectations: rule$expectations
    };

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Title",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Title",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseMetaData() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    peg$tracer.trace({
      type: "rule.enter",
      rule: "MetaData",
      location: peg$computeLocation(startPos, startPos)
    });

    var key = peg$currPos * 9 + 2;
    var cached = peg$resultsCache[key];
    var rule$expectations = [];

    rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
      rule$expectations.push(expected);
    }

    if (cached) {
      peg$currPos = cached.nextPos;

      rule$expectations = cached.expectations;
      if (peg$silentFails === 0) {
        rule$expectations.forEach(peg$expect);
      }

    if (cached.result !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "MetaData",
        result: cached.result,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "MetaData",
        location: peg$computeLocation(startPos, startPos)
      });
    }

      return cached.result;
    }

    rule$expects(peg$e1);
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c1) {
      s2 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.substr(peg$currPos, 23).toLowerCase() === peg$c2) {
        s4 = input.substr(peg$currPos, 23);
        peg$currPos += 23;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c3) {
          s6 = input.substr(peg$currPos, 11);
          peg$currPos += 11;
        } else {
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 62) {
            s8 = peg$c4;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
          }
          if (s8 !== peg$FAILED) {
            s2 = [s2, s3, s4, s5, s6, s7, s8];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse__();
    s3 = peg$currPos;
    s4 = [];
    s5 = peg$currPos;
    s6 = peg$currPos;
    peg$begin();
    s7 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c5) {
      s8 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s8 = peg$FAILED;
    }
    if (s8 !== peg$FAILED) {
      s9 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 62) {
        s10 = peg$c4;
        peg$currPos++;
      } else {
        s10 = peg$FAILED;
      }
      if (s10 !== peg$FAILED) {
        s8 = [s8, s9, s10];
        s7 = s8;
      } else {
        peg$currPos = s7;
        s7 = peg$FAILED;
      }
    } else {
      peg$currPos = s7;
      s7 = peg$FAILED;
    }
    peg$end(true);
    if (s7 === peg$FAILED) {
      s6 = undefined;
    } else {
      peg$currPos = s6;
      s6 = peg$FAILED;
    }
    if (s6 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s7 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s7 = peg$FAILED;
      }
      if (s7 !== peg$FAILED) {
        peg$savedPos = s5;
        s5 = peg$f3(s1, s7);
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
    } else {
      peg$currPos = s5;
      s5 = peg$FAILED;
    }
    while (s5 !== peg$FAILED) {
      s4.push(s5);
      s5 = peg$currPos;
      s6 = peg$currPos;
      peg$begin();
      s7 = peg$currPos;
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c5) {
        s8 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s8 = peg$FAILED;
      }
      if (s8 !== peg$FAILED) {
        s9 = peg$parse__();
        if (input.charCodeAt(peg$currPos) === 62) {
          s10 = peg$c4;
          peg$currPos++;
        } else {
          s10 = peg$FAILED;
        }
        if (s10 !== peg$FAILED) {
          s8 = [s8, s9, s10];
          s7 = s8;
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
      } else {
        peg$currPos = s7;
        s7 = peg$FAILED;
      }
      peg$end(true);
      if (s7 === peg$FAILED) {
        s6 = undefined;
      } else {
        peg$currPos = s6;
        s6 = peg$FAILED;
      }
      if (s6 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s7 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
        }
        if (s7 !== peg$FAILED) {
          peg$savedPos = s5;
          s5 = peg$f3(s1, s7);
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
    }
    peg$savedPos = s3;
    s4 = peg$f4(s1, s4);
    s3 = s4;
    s4 = peg$parse__();
    s5 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c5) {
      s6 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s6 = peg$FAILED;
    }
    if (s6 !== peg$FAILED) {
      s7 = peg$parse__();
      if (input.charCodeAt(peg$currPos) === 62) {
        s8 = peg$c4;
        peg$currPos++;
      } else {
        s8 = peg$FAILED;
      }
      if (s8 !== peg$FAILED) {
        s6 = [s6, s7, s8];
        s5 = s6;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
    } else {
      peg$currPos = s5;
      s5 = peg$FAILED;
    }
    if (s5 === peg$FAILED) {
      s5 = null;
    }
    peg$savedPos = s0;
    s0 = peg$f5(s1, s3, s5);
    peg$silentFails--;

    peg$resultsCache[key] = {
      nextPos: peg$currPos,
      result: s0,
      expectations: rule$expectations
    };

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "MetaData",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "MetaData",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseAditionalStyle() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    peg$tracer.trace({
      type: "rule.enter",
      rule: "AditionalStyle",
      location: peg$computeLocation(startPos, startPos)
    });

    var key = peg$currPos * 9 + 3;
    var cached = peg$resultsCache[key];
    var rule$expectations = [];

    rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
      rule$expectations.push(expected);
    }

    if (cached) {
      peg$currPos = cached.nextPos;

      rule$expectations = cached.expectations;
      if (peg$silentFails === 0) {
        rule$expectations.forEach(peg$expect);
      }

    if (cached.result !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "AditionalStyle",
        result: cached.result,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "AditionalStyle",
        location: peg$computeLocation(startPos, startPos)
      });
    }

      return cached.result;
    }

    s0 = peg$currPos;
    rule$expects(peg$e2);
    if (input.substr(peg$currPos, 7) === peg$c6) {
      s1 = peg$c6;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$currPos;
      s4 = [];
      s5 = peg$currPos;
      s6 = peg$currPos;
      peg$begin();
      s7 = peg$currPos;
      rule$expects(peg$e3);
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c7) {
        s8 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s8 = peg$FAILED;
      }
      if (s8 !== peg$FAILED) {
        s9 = peg$parse__();
        rule$expects(peg$e4);
        if (input.charCodeAt(peg$currPos) === 62) {
          s10 = peg$c4;
          peg$currPos++;
        } else {
          s10 = peg$FAILED;
        }
        if (s10 !== peg$FAILED) {
          s8 = [s8, s9, s10];
          s7 = s8;
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
      } else {
        peg$currPos = s7;
        s7 = peg$FAILED;
      }
      peg$end(true);
      if (s7 === peg$FAILED) {
        s6 = undefined;
      } else {
        peg$currPos = s6;
        s6 = peg$FAILED;
      }
      if (s6 !== peg$FAILED) {
        rule$expects(peg$e5);
        if (input.length > peg$currPos) {
          s7 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
        }
        if (s7 !== peg$FAILED) {
          peg$savedPos = s5;
          s5 = peg$f6(s1, s7);
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$currPos;
        s6 = peg$currPos;
        peg$begin();
        s7 = peg$currPos;
        rule$expects(peg$e3);
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c7) {
          s8 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s8 = peg$FAILED;
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$parse__();
          rule$expects(peg$e4);
          if (input.charCodeAt(peg$currPos) === 62) {
            s10 = peg$c4;
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
          }
          if (s10 !== peg$FAILED) {
            s8 = [s8, s9, s10];
            s7 = s8;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        peg$end(true);
        if (s7 === peg$FAILED) {
          s6 = undefined;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          rule$expects(peg$e5);
          if (input.length > peg$currPos) {
            s7 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s5;
            s5 = peg$f6(s1, s7);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      }
      peg$savedPos = s3;
      s4 = peg$f7(s1, s4);
      s3 = s4;
      s4 = peg$parse__();
      rule$expects(peg$e6);
      if (input.substr(peg$currPos, 8) === peg$c8) {
        s5 = peg$c8;
        peg$currPos += 8;
      } else {
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f8(s1, s3, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = {
      nextPos: peg$currPos,
      result: s0,
      expectations: rule$expectations
    };

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "AditionalStyle",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "AditionalStyle",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseBody() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Body",
      location: peg$computeLocation(startPos, startPos)
    });

    var key = peg$currPos * 9 + 4;
    var cached = peg$resultsCache[key];
    var rule$expectations = [];

    rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
      rule$expectations.push(expected);
    }

    if (cached) {
      peg$currPos = cached.nextPos;

      rule$expectations = cached.expectations;
      if (peg$silentFails === 0) {
        rule$expectations.forEach(peg$expect);
      }

    if (cached.result !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Body",
        result: cached.result,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Body",
        location: peg$computeLocation(startPos, startPos)
      });
    }

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    rule$expects(peg$e5);
    if (input.length > peg$currPos) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
    }
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      rule$expects(peg$e5);
      if (input.length > peg$currPos) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
    }
    s1 = input.substring(s1, peg$currPos);
    peg$savedPos = s0;
    s1 = peg$f9();
    s0 = s1;

    peg$resultsCache[key] = {
      nextPos: peg$currPos,
      result: s0,
      expectations: rule$expectations
    };

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Body",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Body",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseString() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    peg$tracer.trace({
      type: "rule.enter",
      rule: "String",
      location: peg$computeLocation(startPos, startPos)
    });

    var key = peg$currPos * 9 + 5;
    var cached = peg$resultsCache[key];
    var rule$expectations = [];

    rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
      rule$expectations.push(expected);
    }

    if (cached) {
      peg$currPos = cached.nextPos;

      rule$expectations = cached.expectations;
      if (peg$silentFails === 0) {
        rule$expectations.forEach(peg$expect);
      }

    if (cached.result !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "String",
        result: cached.result,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "String",
        location: peg$computeLocation(startPos, startPos)
      });
    }

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c9;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$r3.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r3.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c9;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        peg$savedPos = s0;
        s0 = peg$f10(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c10;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$r4.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$r4.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
          }
        }
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c10;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          peg$savedPos = s0;
          s0 = peg$f10(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (peg$r5.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$r5.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          peg$savedPos = s0;
          s0 = peg$f10(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    peg$resultsCache[key] = {
      nextPos: peg$currPos,
      result: s0,
      expectations: rule$expectations
    };

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "String",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "String",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parseSymbol() {
    var startPos = peg$currPos;
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    peg$tracer.trace({
      type: "rule.enter",
      rule: "Symbol",
      location: peg$computeLocation(startPos, startPos)
    });

    var key = peg$currPos * 9 + 6;
    var cached = peg$resultsCache[key];
    var rule$expectations = [];

    rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
      rule$expectations.push(expected);
    }

    if (cached) {
      peg$currPos = cached.nextPos;

      rule$expectations = cached.expectations;
      if (peg$silentFails === 0) {
        rule$expectations.forEach(peg$expect);
      }

    if (cached.result !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Symbol",
        result: cached.result,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Symbol",
        location: peg$computeLocation(startPos, startPos)
      });
    }

      return cached.result;
    }

    s0 = peg$currPos;
    if (peg$r6.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$r7.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r7.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f11(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = {
      nextPos: peg$currPos,
      result: s0,
      expectations: rule$expectations
    };

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "Symbol",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "Symbol",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parse__() {
    var startPos = peg$currPos;
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    peg$tracer.trace({
      type: "rule.enter",
      rule: "__",
      location: peg$computeLocation(startPos, startPos)
    });

    var key = peg$currPos * 9 + 7;
    var cached = peg$resultsCache[key];
    var rule$expectations = [];

    rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
      rule$expectations.push(expected);
    }

    if (cached) {
      peg$currPos = cached.nextPos;

      rule$expectations = cached.expectations;
      if (peg$silentFails === 0) {
        rule$expectations.forEach(peg$expect);
      }

    if (cached.result !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "__",
        result: cached.result,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "__",
        location: peg$computeLocation(startPos, startPos)
      });
    }

      return cached.result;
    }

    rule$expects(peg$e7);
    peg$silentFails++;
    s0 = [];
    if (peg$r8.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$r8.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
    }
    peg$silentFails--;

    peg$resultsCache[key] = {
      nextPos: peg$currPos,
      result: s0,
      expectations: rule$expectations
    };

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "__",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "__",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }

  function peg$parse_() {
    var startPos = peg$currPos;
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    peg$tracer.trace({
      type: "rule.enter",
      rule: "_",
      location: peg$computeLocation(startPos, startPos)
    });

    var key = peg$currPos * 9 + 8;
    var cached = peg$resultsCache[key];
    var rule$expectations = [];

    rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
      rule$expectations.push(expected);
    }

    if (cached) {
      peg$currPos = cached.nextPos;

      rule$expectations = cached.expectations;
      if (peg$silentFails === 0) {
        rule$expectations.forEach(peg$expect);
      }

    if (cached.result !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "_",
        result: cached.result,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "_",
        location: peg$computeLocation(startPos, startPos)
      });
    }

      return cached.result;
    }

    s0 = [];
    if (peg$r9.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$r9.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
    }

    peg$resultsCache[key] = {
      nextPos: peg$currPos,
      result: s0,
      expectations: rule$expectations
    };

    if (s0 !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: "_",
        result: s0,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: "_",
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return s0;
  }



    class Node {
      constructor(name,attributes,content){
        name && (this.name = name);
        attributes && (this.attributes = attributes);
        content && (this.content = content);
      }
    }

    class HtmlNode extends Node {
      constructor(name,attributes,content){
        super(name,attributes,content);
      }
    }
   
    function reduceToObj (xs)
    {
      let attr = {};
      for(const x of xs){
        if(x && x.name){
          attr[x.name] = x.text;
        }
      }
      return attr;
    }


  peg$begin();
  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$expect(peg$endExpectation());
    }

    throw peg$buildError();
  }
}

export {
  peg$SyntaxError as SyntaxError,
  peg$DefaultTracer as DefaultTracer,
  peg$parse as parse
};

export default {
  SyntaxError: peg$SyntaxError,
  DefaultTracer: peg$DefaultTracer,
  parse: peg$parse
};
